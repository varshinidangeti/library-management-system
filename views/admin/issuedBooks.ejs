<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Issued Books</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .order-container {
            border-radius: 10px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .table-responsive {
            overflow-x: auto;
        }

        .header-section {
            background-color: #f8f9fa;
            padding: 25px 0;
            margin-bottom: 30px;
            border-bottom: 1px solid #dee2e6;
        }

        .back-button {
            transition: all 0.3s ease;
        }

        .back-button:hover {
            transform: translateX(-5px);
        }

        .empty-state {
            padding: 50px 20px;
            color: #6c757d;
        }

        .book-image {
            width: 50px;
            height: 70px;
            object-fit: cover;
            border-radius: 4px;
        }

        button:disabled {
            cursor: not-allowed;
        }

        .toast-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1050;
        }

        .overdue {
            color: #dc3545;
            font-weight: bold;
        }
    </style>
</head>
<body>
<%- include('../layout/header') %>

<div class="header-section">
    <div class="container">
        <div class="d-flex justify-content-between align-items-center">
            <h1>Issued Books</h1>
            <button class="btn btn-outline-primary back-button" onclick="window.history.back()">
                <i class="bi bi-arrow-left me-2"></i>Back to Users
            </button>
        </div>
    </div>
</div>

<div class="container mb-5">
    <div class="order-container">
        <% if (books.length === 0) { %>
            <div class="empty-state text-center">
                <svg width="80" height="80" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                     stroke-linecap="round" stroke-linejoin="round">
                    <circle cx="12" cy="12" r="10"></circle>
                    <line x1="8" y1="12" x2="16" y2="12"></line>
                </svg>
                <h3 class="mt-4">No Issued Books Found</h3>
                <p class="text-muted">There are no books issued to users yet.</p>
            </div>
        <% } else { %>
            <div class="table-responsive">
                <table class="table table-hover mb-0">
                    <thead class="table-light">
                    <tr>
                        <th>Request ID</th>
                        <th>Image</th>
                        <th>Book Details</th>
                        <th>Issue Date</th>
                        <th>Due Date</th>
                        <th>Fine</th>
                        <th>Actions</th>
                    </tr>
                    </thead>
                    <tbody>
                    <% books.forEach(book => { %>
                        <%
                            const issueDate = new Date(book.issue_date);
                            const dueDate = new Date(book.due_date);
                            const diffTime = Math.abs(dueDate - issueDate);
                            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
                            const needsFine = diffDays > 15;
                        %>
                        <tr id="book-row-<%= book.request_id %>">
                            <td><span class="badge bg-light text-dark">#<%= book.request_id %></span></td>
                            <td>
                                <img src="/img/<%= book.book_img %>" alt="<%= book.book_name %>" class="book-image">
                            </td>
                            <td>
                                <div class="fw-bold"><%= book.book_name %></div>
                                <div class="text-muted small">by <%= book.book_author %></div>
                                <div class="small">Book ID: #<%= book.book_id %></div>
                            </td>
                            <td><%= issueDate.toLocaleDateString() %></td>
                            <td class="<%= needsFine ? 'overdue' : '' %>"><%= dueDate.toLocaleDateString() %></td>
                            <td>
                                <% if (book.fine ) { %>
                                    <span class="badge bg-danger">$<%= book.fine %></span>
                                <% } else { %>
                                    <span class="badge bg-success">No Fine</span>
                                <% } %>
                            </td>
                            <td>
                                <button type="button" class="btn btn-sm btn-danger add-fine-btn"
                                        data-request-id="<%= book.request_id %>" data-user-id="<%= book.user_id %>"
                                        data-book-name="<%= book.book_name %>" data-bs-toggle="modal" data-bs-target="#fineModal">
                                    <i class="bi bi-currency-dollar me-1"></i>Add Fine
                                </button>
                            </td>
                        </tr>
                    <% }); %>
                    </tbody>
                </table>
            </div>
        <% } %>
    </div>
</div>

<!-- Fine Modal -->
<div class="modal fade" id="fineModal" tabindex="-1" aria-labelledby="fineModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="fineModalLabel">Add Fine</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="fine-request-id">
                <input type="hidden" id="fine-user-id">
                <p>Adding fine for book: <strong id="fine-book-name"></strong></p>
                <div class="mb-3">
                    <label for="fine-amount" class="form-label">Fine Amount ($)</label>
                    <input type="number" class="form-control" id="fine-amount" min="0" step="0.01" value="5.00">
                </div>
                <div class="mb-3">
                    <label for="fine-reason" class="form-label">Reason</label>
                    <select class="form-select" id="fine-reason">
                        <option value="late">Late Return</option>
                        <option value="damage">Book Damage</option>
                        <option value="loss">Book Loss</option>
                        <option value="other">Other</option>
                    </select>
                </div>
                <div class="mb-3" id="other-reason-container" style="display: none;">
                    <label for="other-reason" class="form-label">Specify Reason</label>
                    <textarea class="form-control" id="other-reason" rows="2"></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirm-fine-btn">Confirm Fine</button>
            </div>
        </div>
    </div>
</div>

<!-- Toast container for notifications -->
<div class="toast-container">
    <div class="toast align-items-center text-white bg-success border-0" role="alert" aria-live="assertive"
         aria-atomic="true" id="successToast">
        <div class="d-flex">
            <div class="toast-body">
                <i class="bi bi-check-circle me-2"></i>
                <span id="success-message"></span>
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"
                    aria-label="Close"></button>
        </div>
    </div>

    <div class="toast align-items-center text-white bg-danger border-0" role="alert" aria-live="assertive"
         aria-atomic="true" id="errorToast">
        <div class="d-flex">
            <div class="toast-body">
                <i class="bi bi-exclamation-circle me-2"></i>
                <span id="error-message"></span>
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"
                    aria-label="Close"></button>
        </div>
    </div>
</div>

<%- include('../layout/footer') %>

<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Set up add fine buttons
        const addFineButtons = document.querySelectorAll('.add-fine-btn');
        addFineButtons.forEach(button => {
            button.addEventListener('click', function () {
                const requestId = this.getAttribute('data-request-id');
                const userId = this.getAttribute('data-user-id');
                const bookName = this.getAttribute('data-book-name');

                // Set modal values
                document.getElementById('fine-request-id').value = requestId;
                document.getElementById('fine-user-id').value = userId;
                document.getElementById('fine-book-name').textContent = bookName;

                // Store the button reference to return focus later
                document.getElementById('fineModal').setAttribute('data-return-focus', `book-row-${requestId}`);
            });
        });

        // Fine reason dropdown change
        document.getElementById('fine-reason').addEventListener('change', function() {
            const otherReasonContainer = document.getElementById('other-reason-container');
            if (this.value === 'other') {
                otherReasonContainer.style.display = 'block';
            } else {
                otherReasonContainer.style.display = 'none';
            }
        });

        // Confirm fine button
        document.getElementById('confirm-fine-btn').addEventListener('click', function() {
            const requestId = document.getElementById('fine-request-id').value;
            const userId = document.getElementById('fine-user-id').value;
            const fineAmount = document.getElementById('fine-amount').value;
            const reason = document.getElementById('fine-reason').value;
            const otherReason = document.getElementById('other-reason').value;

            // Create data object
            const data = {
                requestId: requestId,
                userId: userId,
                fine: fineAmount,
                reason: reason === 'other' ? otherReason : reason
            };

            // Send AJAX request
            fetch('/admin/setFine', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.text();
                })
                .then(data => {
                    // Close modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('fineModal'));
                    modal.hide();

                    // Show success message
                    document.getElementById('success-message').textContent =
                        `Fine of $${fineAmount} added successfully for book request #${requestId}`;

                    const successToast = new bootstrap.Toast(document.getElementById('successToast'));
                    successToast.show();

                    // Update the row
                    const row = document.getElementById(`book-row-${requestId}`);
                    const fineCell = row.querySelector('td:nth-child(6)');
                    fineCell.innerHTML = `<span class="badge bg-danger">$${fineAmount}</span>`;

                    // Return focus to the button or row
                    setTimeout(() => {
                        const rowId = document.getElementById('fineModal').getAttribute('data-return-focus');
                        const rowElement = document.getElementById(rowId);
                        if (rowElement) {
                            const focusButton = rowElement.querySelector('.add-fine-btn');
                            if (focusButton) {
                                focusButton.focus();
                            } else {
                                rowElement.setAttribute('tabindex', '-1');
                                rowElement.focus();
                                rowElement.removeAttribute('tabindex');
                            }
                        }
                    }, 100); // Small delay to ensure modal is fully closed
                })
                .catch(error => {
                    // Show error message
                    document.getElementById('error-message').textContent =
                        `Failed to add fine for book request #${requestId}. Please try again.`;

                    const errorToast = new bootstrap.Toast(document.getElementById('errorToast'));
                    errorToast.show();
                });
        });

        // Handle modal hidden event to restore focus
        const fineModal = document.getElementById('fineModal');
        fineModal.addEventListener('hidden.bs.modal', function () {
            const rowId = this.getAttribute('data-return-focus');
            if (!rowId) return;

            const rowElement = document.getElementById(rowId);
            if (rowElement) {
                const focusButton = rowElement.querySelector('.add-fine-btn');
                if (focusButton) {
                    focusButton.focus();
                }
            }
        });
    });
</script>
</body>
</html>