<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Book Requests</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .order-container {
            border-radius: 10px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .table-responsive {
            overflow-x: auto;
        }

        .header-section {
            background-color: #f8f9fa;
            padding: 25px 0;
            margin-bottom: 30px;
            border-bottom: 1px solid #dee2e6;
        }

        .back-button {
            transition: all 0.3s ease;
        }

        .back-button:hover {
            transform: translateX(-5px);
        }

        .empty-state {
            padding: 50px 20px;
            color: #6c757d;
        }

        .book-image {
            width: 50px;
            height: 70px;
            object-fit: cover;
            border-radius: 4px;
        }

        button:disabled {
            cursor: not-allowed;
        }

        .toast-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1050;
        }
    </style>
</head>
<body>
<%- include('../layout/header') %>

<div class="header-section">
    <div class="container">
        <div class="d-flex justify-content-between align-items-center">
            <h1>Book Requests</h1>
            <button class="btn btn-outline-primary back-button" onclick="window.history.back()">
                <i class="bi bi-arrow-left me-2"></i>Back to Users
            </button>
        </div>
    </div>
</div>

<div class="container mb-5">
    <div class="order-container">
        <% if (books.length === 0) { %>
            <div class="empty-state text-center">
                <svg width="80" height="80" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                     stroke-linecap="round" stroke-linejoin="round">
                    <circle cx="12" cy="12" r="10"></circle>
                    <line x1="8" y1="12" x2="16" y2="12"></line>
                </svg>
                <h3 class="mt-4">No Book Requests Found</h3>
                <p class="text-muted">Users hasn't requested any books yet.</p>
            </div>
        <% } else { %>
            <div class="table-responsive">
                <table class="table table-hover mb-0">
                    <thead class="table-light">
                    <tr>
                        <th>Book ID</th>
                        <th>Image</th>
                        <th>Book Title</th>
                        <th>Available Quantity</th>
                        <th>Status</th>
                        <th>Date</th>
                        <th>Actions</th>
                    </tr>
                    </thead>
                    <tbody>
                    <% books.forEach(book => { %>
                        <tr id="book-row-<%= book.book_id %>">
                            <td><span class="badge bg-light text-dark">#<%= book.book_id %></span></td>
                            <td>
                                <img src="/img/<%= book.book_img %>" alt="<%= book.book_name %>" class="book-image">
                            </td>
                            <td><%= book.book_name %></td>
                            <td><%= book.book_quantity %></td>
                            <td>
                                <% if (book.book_quantity > 0) { %>
                                    <span class="badge bg-success">Available</span>
                                <% } else { %>
                                    <span class="badge bg-danger">Out of stock</span>
                                <% } %>
                            </td>
                            <td><%= new Date().toLocaleDateString() %></td>
                            <td>
                                <button type="button" class="btn btn-sm btn-primary approve-btn"
                                        data-book-id="<%= book.book_id %>" data-user-id="<%= book.id %>">
                                    <i class="approve-icon bi bi-check-circle me-1"></i>Approve
                                </button>
                                <button type="button" class="btn btn-sm btn-danger reject-btn"
                                        data-book-id="<%= book.book_id %>" data-user-id="<%= book.id %>">
                                    <i class="reject-icon bi bi-x-circle me-1"></i>Reject
                                </button>
                            </td>
                        </tr>
                    <% }); %>
                    </tbody>
                </table>
            </div>
        <% } %>
    </div>
</div>

<!-- Toast container for notifications -->
<div class="toast-container">
    <div class="toast align-items-center text-white bg-success border-0" role="alert" aria-live="assertive"
         aria-atomic="true" id="successToast">
        <div class="d-flex">
            <div class="toast-body">
                <i class="bi bi-check-circle me-2"></i>
                <span id="success-message"></span>
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"
                    aria-label="Close"></button>
        </div>
    </div>

    <div class="toast align-items-center text-white bg-danger border-0" role="alert" aria-live="assertive"
         aria-atomic="true" id="errorToast">
        <div class="d-flex">
            <div class="toast-body">
                <i class="bi bi-exclamation-circle me-2"></i>
                <span id="error-message"></span>
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"
                    aria-label="Close"></button>
        </div>
    </div>
</div>

<%- include('../layout/footer') %>

<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Set up approve buttons
        const approveButtons = document.querySelectorAll('.approve-btn');
        approveButtons.forEach(button => {
            button.addEventListener('click', function () {
                const bookId = this.getAttribute('data-book-id');
                const userId = this.getAttribute('data-user-id');
                handleBookAction(button, bookId, userId, 'issue');
            });
        });

        // Set up reject buttons
        const rejectButtons = document.querySelectorAll('.reject-btn');
        rejectButtons.forEach(button => {
            button.addEventListener('click', function () {
                const bookId = this.getAttribute('data-book-id');
                const userId = this.getAttribute('data-user-id');
                handleBookAction(button, bookId, userId, 'reject');
            });
        });

        // Handle book actions (issue or reject)
        function handleBookAction(button, bookId, userId, action) {
            // Get row and sibling button
            const row = document.getElementById(`book-row-${bookId}`);
            const siblingButton = action === 'issue'
                ? button.nextElementSibling
                : button.previousElementSibling;

            // Disable both buttons
            button.disabled = true;
            siblingButton.disabled = true;
            button.querySelector(action === 'issue' ? '.approve-icon' : '.reject-icon').style.display = 'inline-block';

            // Prepare the data and URL
            const url = action === 'issue'
                ? '/admin/issueBook'
                : '/admin/rejectBookIssue';

            const data = {
                bookId: bookId,
                userId: userId
            };

            // Send AJAX request
            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.text();
                })
                .then(data => {
                    // Show success message
                    document.getElementById('success-message').textContent =
                        action === 'issue' ? `Book #${bookId} successfully issued` : `Book #${bookId} request rejected`;

                    const successToast = new bootstrap.Toast(document.getElementById('successToast'));
                    successToast.show();

                    // Remove the row with animation
                    row.style.transition = 'opacity 0.5s ease';
                    row.style.opacity = '0';

                    setTimeout(() => {
                        row.remove();

                        // Check if table is empty and show empty state if needed
                        const tbody = document.querySelector('tbody');
                        if (tbody && tbody.children.length === 0) {
                            const table = document.querySelector('.table-responsive');
                            const emptyState = `
                        <div class="empty-state text-center">
                            <svg width="80" height="80" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                                 stroke-linecap="round" stroke-linejoin="round">
                                <circle cx="12" cy="12" r="10"></circle>
                                <line x1="8" y1="12" x2="16" y2="12"></line>
                            </svg>
                            <h3 class="mt-4">No Book Requests Found</h3>
                            <p class="text-muted">All requests have been processed.</p>
                        </div>
                    `;
                            table.innerHTML = emptyState;
                        }
                    }, 500);
                })
                .catch(error => {
                    // Show error message
                    document.getElementById('error-message').textContent =
                        `Failed to ${action === 'issue' ? 'issue' : 'reject'} book #${bookId}. Please try again.`;

                    const errorToast = new bootstrap.Toast(document.getElementById('errorToast'));
                    errorToast.show();

                    // Re-enable buttons
                    button.disabled = false;
                    siblingButton.disabled = false;
                    button.querySelector(action === 'issue' ? '.approve-icon' : '.reject-icon').style.display = 'inline-block';
                });
        }
    });
</script>
</body>
</html>